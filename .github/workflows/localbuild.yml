name: ArkRinth build (ACT Local Compatible)

on:
  workflow_dispatch:

jobs:
  build:
    name: Local Build on ACT
    runs-on: ubuntu-latest  # ACT compatible runner

    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY || 'dummy-key' }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD || 'dummy-password' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''

      - name: 🧰 Install pnpm
        uses: pnpm/action-setup@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm

      - name: 🧰 Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: 🧰 Setup Dasel
        run: |
          curl -sL https://github.com/TomWright/dasel/releases/download/v2.8.1/dasel_linux_amd64 -o dasel
          chmod +x dasel
          sudo mv dasel /usr/local/bin/dasel

      - name: 🏷️ Get version info
        id: get-version-info
        run: |
          git fetch --tags --force || true
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          COMMIT_COUNT=$(git rev-list --count ${LATEST_TAG}..HEAD 2>/dev/null || echo "0")
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "commit-count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "short-sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: ⚙️ Set application version
        run: |
          APP_VERSION="${{ steps.get-version-info.outputs.latest-tag }}-canary+${{ steps.get-version-info.outputs.commit-count }}.${{ steps.get-version-info.outputs.short-sha }}"
          echo "Setting version to ${APP_VERSION#v}"
          dasel put -f apps/app/Cargo.toml -t string -v "${APP_VERSION#v}" 'package.version'
          dasel put -f packages/app-lib/Cargo.toml -t string -v "${APP_VERSION#v}" 'package.version'
          dasel put -f apps/app-frontend/package.json -t string -v "${APP_VERSION#v}" 'version'

      - name: 💨 Setup Turbo cache
        uses: rharkor/caching-for-turbo@v1.8

      - name: 🧰 Install dependencies
        run: pnpm install

      - name: 🔨 Build (Linux)
        run: |
          pnpm --filter=@modrinth/app run tauri build --config tauri-release.conf.json

      - name: 📤 Save build artifacts
        if: always()
        run: |
          mkdir -p ./artifacts
          cp -r target/release/bundle/* ./artifacts || true
        continue-on-error: true

      - name: 📦 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ark-bundles
          path: ./artifacts
