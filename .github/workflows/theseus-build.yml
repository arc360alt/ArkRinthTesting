name: ArkRinth build
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - .github/workflows/theseus-build.yml
      - 'apps/app/**'
      - 'apps/app-frontend/**'
      - 'packages/app-lib/**'
      - 'packages/app-macros/**'
      - 'packages/assets/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest, ubuntu-22.04]
        include:
          - platform: macos-latest
            artifact-target-name: universal-apple-darwin
          - platform: windows-latest
            artifact-target-name: x86_64-pc-windows-msvc
          - platform: ubuntu-22.04
            artifact-target-name: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.platform }}

    steps:
      - name: 📥 Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Java for Gradle
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🧰 Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          target: ${{ startsWith(matrix.platform, 'macos') && 'x86_64-apple-darwin' || '' }}
          cache-key: ${{ matrix.platform }}-${{ hashFiles('**/Cargo.lock') }}

      - name: 🧰 Install pnpm
        uses: pnpm/action-setup@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm

      - name: 🧰 Install Linux build dependencies
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -yq \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            libegl1-mesa-dev \
            libgl1-mesa-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libgtk-3-dev \
            rpm

      - name: ⚙️ Grant execute permissions to gradlew
        if: startsWith(matrix.platform, 'ubuntu') || startsWith(matrix.platform, 'macos')
        run: chmod +x ./packages/app-lib/java/gradlew

      - name: 🧰 Setup Dasel
        uses: jaxxstorm/action-install-gh-release@v2.1.0
        with:
          repo: TomWright/dasel
          tag: v2.8.1
          extension-matching: disable
          rename-to: ${{ startsWith(matrix.platform, 'windows') && 'dasel.exe' || 'dasel' }}
          chmod: 0755

      - name: 🏷️ Get version info
        id: get-version-info
        shell: bash
        run: |
          git fetch --tags --force
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          COMMIT_COUNT=$(git rev-list --count ${LATEST_TAG}..HEAD 2>/dev/null || echo "0")
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "commit-count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "short-sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: ⚙️ Set application version
        shell: bash
        env:
          APP_VERSION: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || format('{0}-canary.{1}.{2}', steps.get-version-info.outputs.latest-tag, steps.get-version-info.outputs.commit-count, steps.get-version-info.outputs.short-sha) }}
        run: |
          echo "Setting application version to $APP_VERSION"
          # Remove 'v' prefix and ensure proper semver format
          CLEAN_VERSION="${APP_VERSION#v}"
          # Replace any '+' with '-' for better semver compatibility
          CLEAN_VERSION="${CLEAN_VERSION//+/-}"
          echo "Clean version: $CLEAN_VERSION"
          dasel put -f apps/app/Cargo.toml -t string -v "$CLEAN_VERSION" 'package.version'
          dasel put -f packages/app-lib/Cargo.toml -t string -v "$CLEAN_VERSION" 'package.version'
          dasel put -f apps/app-frontend/package.json -t string -v "$CLEAN_VERSION" 'version'

      - name: 💨 Setup Turbo cache
        uses: rharkor/caching-for-turbo@v1.8

      - name: 🧰 Install dependencies
        run: pnpm install

      - name: 🔨 Build macOS app
        run: pnpm --filter=@modrinth/app run tauri build --target universal-apple-darwin --config tauri-release.conf.json
        if: startsWith(matrix.platform, 'macos')
        # Removed TAURI_SIGNING_PRIVATE_KEY and TAURI_SIGNING_PRIVATE_KEY_PASSWORD env variables
        # env:
        #   TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        #   TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: 🔨 Build Linux app
        run: pnpm --filter=@modrinth/app run tauri build --config tauri-release.conf.json
        if: startsWith(matrix.platform, 'ubuntu')
        env:
          WEBKIT_DISABLE_COMPOSITING_MODE: 1
        # Removed TAURI_SIGNING_PRIVATE_KEY and TAURI_SIGNING_PRIVATE_KEY_PASSWORD env variables
        # env:
        #   TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        #   TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: 🔧 Fix AppImage EGL issues
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          # Find the AppImage file
          APPIMAGE_FILE=$(find target/release/bundle/appimage -name "ArkRinth_*.AppImage" | head -1)
          if [ -z "$APPIMAGE_FILE" ]; then
            echo "No AppImage found, skipping fix"
            exit 0
          fi
          
          echo "Found AppImage: $APPIMAGE_FILE"
          
          # Make it executable
          chmod +x "$APPIMAGE_FILE"
          
          # Extract AppImage
          "$APPIMAGE_FILE" --appimage-extract
          
          # Find the actual binary name (might be different)
          BINARY_NAME=$(find squashfs-root/usr/bin -type f -executable | head -1)
          if [ -z "$BINARY_NAME" ]; then
            BINARY_NAME="squashfs-root/usr/bin/ark-rinth"
          fi
          
          echo "Binary found at: $BINARY_NAME"
          
          # Create a custom AppRun script with EGL fixes
          cat > squashfs-root/AppRun << 'EOF'
          #!/bin/bash
          APPDIR="$(dirname "$(readlink -f "${0}")")"
          export LD_LIBRARY_PATH="${APPDIR}/usr/lib:${LD_LIBRARY_PATH}"
          export QT_QPA_PLATFORM_PLUGIN_PATH="${APPDIR}/usr/plugins/platforms"
          export QT_QUICK_BACKEND=software
          export LIBGL_ALWAYS_SOFTWARE=1
          export QT_QPA_PLATFORM=xcb
          
          # Find the actual binary
          BINARY=$(find "${APPDIR}/usr/bin" -type f -executable | head -1)
          if [ -z "$BINARY" ]; then
            echo "No executable found in usr/bin"
            exit 1
          fi
          
          exec "$BINARY" "$@"
          EOF
          
          chmod +x squashfs-root/AppRun
          
          # Download appimagetool
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          # Rebuild AppImage with fixed AppRun
          ./appimagetool-x86_64.AppImage squashfs-root "${APPIMAGE_FILE%.AppImage}_fixed.AppImage"
          
          # Replace the original with the fixed one
          mv "${APPIMAGE_FILE%.AppImage}_fixed.AppImage" "$APPIMAGE_FILE"
          
          echo "AppImage fixed successfully"

      - name: 🔨 Build Windows app
        run: |
          $env:JAVA_HOME = "$env:JAVA_HOME_11_X64"
          pnpm --filter=@modrinth/app run tauri build --config tauri-release.conf.json --verbose --bundles 'nsis,updater'
        if: startsWith(matrix.platform, 'windows')
        # Removed TAURI_SIGNING_PRIVATE_KEY and TAURI_SIGNING_PRIVATE_KEY_PASSWORD env variables
        # env:
        #   TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        #   TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: 📤 Upload app bundles
        uses: actions/upload-artifact@v4
        with:
          name: App bundle (${{ matrix.artifact-target-name }})
          path: |
            target/release/bundle/appimage/ArkRinth_*.AppImage*
            target/release/bundle/deb/ArkRinth_*.deb*
            target/release/bundle/rpm/ArkRinth-*.rpm*
            target/universal-apple-darwin/release/bundle/macos/ArkRinth_.app.tar.gz*
            target/universal-apple-darwin/release/bundle/dmg/ArkRinth_*.dmg*
            target/release/bundle/nsis/ArkRinth_*-setup.exe*
            target/release/bundle/nsis/ArkRinth_*-setup.nsis.zip*
